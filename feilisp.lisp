(in-package #:feilisp)

(defparameter $consonants
  '(m n g f d s x c h r l i u))

(defparameter $vowels
  '(i u o e a ii uu oo ee aa))

(defun permute-parts (left-parts right-parts)
  (mapcar (lambda (comb)
            (intern (concatenate 'string
                                 (symbol-name (first comb))
                                 (symbol-name (second comb)))
                    :feilisp))
          (remove-duplicates
           (reduce #'append
                   (loop for left in left-parts
                      collect (loop for right in right-parts
                                 collect (list left right))))
           :test #'eq)))

(defparameter $diphthongs
  (let* ((vwls (remove-if (lambda (v)(> (length (symbol-name v)) 1))
                          $vowels))
         (dips (permute-parts vwls vwls)))
    (remove-if (lambda (dip)
                 (let ((s (symbol-name dip)))
                   (equal (elt s 0)
                          (elt s 1))))
               dips)))

(defparameter $base-syllables
  '((c l)
    (c ls)
    (c n)
    (c rs)
    (c s)
    (c t)
    (cl ir)
    (cl s)
    (cl t)
    (cl w)
    (cr ic)
    (cr t)
    (cr wt)
    (cr yt)
    (cw ir)
    (cw n)
    (f c)
    (f g)
    (f h)
    (f l)
    (f m)
    (f n)
    (f ns)
    (f nx)
    (f r)
    (f s)
    (f t)
    (f wm)
    (f x)
    (f yr)
    (fl c)
    (fl n)
    (fl w)
    (fl yt)
    (fr cs)
    (fr l)
    (fr m)
    (fr n)
    (fr t)
    (fw r)
    (fw t)
    (fw yt)
    (fy t)
    (g l)
    (g n)
    (g wf)
    (g wm)
    (g wn)
    (g wt)
    (g yr)
    (g yt)
    (h l)
    (h n)
    (h r)
    (h t)
    (h x)
    (h yr)
    (hl t)
    (hl wn)
    (hr l)
    (hr t)
    (hr yt)
    (hw l)
    (hw yl)
    (l c)
    (l f)
    (l g)
    (l m)
    (l n)
    (l r)
    (l t)
    (l wm)
    (l wn)
    (l y)
    (l yl)
    (l yn)
    (l yr)
    (l yt)
    (l yt)
    (lw c)
    (lw it)
    (lw l)
    (lw n)
    (lw r)
    (lw t)
    (lw y)
    (lw yx)
    (ly c)
    (ly l)
    (ly n)
    (ly r)
    (ly t)
    (ly w)
    (ly wn)
    (ly wt)
    (m c)
    (m g)
    (m l)
    (m n)
    (m nt)
    (m nx)
    (m r)
    (m rs)
    (m s)
    (m t)
    (m w)
    (m wm)
    (m wt)
    (m yn)
    (m yr)
    (mw c)
    (mw g)
    (mw l)
    (mw n)
    (mw r)
    (mw t)
    (mw yl)
    (mw yr)
    (mw ys)
    (mw yt)
    (my l)
    (my s)
    (n c)
    (n g)
    (n m)
    (n r)
    (n s)
    (n t)
    (n wm)
    (n wn)
    (n wt)
    (n x)
    (n y)
    (nw g)
    (nw l)
    (nw m)
    (nw r)
    (ny c)
    (ny m)
    (ny n)
    (ny r)
    (r c)
    (r cs)
    (r gc)
    (r l)
    (r m)
    (r n)
    (r t)
    (r w)
    (r wn)
    (r x)
    (r y)
    (r yl)
    (r yn)
    (r ys)
    (r yx)
    (s c)
    (s f)
    (s g)
    (s l)
    (s ls)
    (s n)
    (s r)
    (s t)
    (s w)
    (s wm)
    (sc n)
    (sc y)
    (sc yl)
    (sf g)
    (sf r)
    (sl c)
    (sl yl)
    (sm g)
    (sm l)
    (sm n)
    (sm w)
    (sn m)
    (sn w)
    (st l)
    (sw c)
    (sw l)
    (sw r)
    (t c)
    (t g)
    (t l)
    (t m)
    (t n)
    (t r)
    (t rc)
    (t wm)
    (t wt)
    (t y)
    (tl c)
    (tl r)
    (tr c)
    (tr g)
    (tr l)
    (tr m)
    (tr n)
    (tr w)
    (tw c)
    (tw g)
    (tw r)
    (tw t)
    (tw yl)
    (ty m)
    (ty n)
    (w l)
    (w lt)
    (w n)
    (w ns)
    (w nt)
    (w r)
    (w rt)
    (w t)
    (w yl)
    (w yr)
    (w ys)
    (x c)
    (x f)
    (x h)
    (x ir)
    (x l)
    (x n)
    (x rc)
    (x rf)
    (x s)
    (x t)
    (x wn)
    (x yc)
    (x yl)
    (x yt)
    (xl yc)
    (xr yc)
    (xw yl)
    (y f)
    (y l)
    (y n)
    (y r)
    (y s)
    (y t)
    (y wf)))

(defparameter $base-initials
  (delete-duplicates (mapcar #'first $base-syllables)))

(defparameter $base-finals
  (delete-duplicates (mapcar #'second $base-syllables)))

(defparameter $cv-particles
  (remove-duplicates
   (append
    (permute-parts $base-initials
                   $vowels)
    (permute-parts $base-initials
                   $diphthongs))))

(defparameter $vc-particles
  (remove-duplicates
   (append
    (permute-parts $vowels
                   $base-finals)
    (permute-parts $diphthongs
                   $base-finals))))
